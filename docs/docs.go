// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "logsquaredn",
            "url": "https://rototiller.logsquaredn.io/",
            "email": "logsquaredn@gmail.com"
        },
        "license": {
            "name": "logsquaredn"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api.storage.v1.StorageService/CreateStorage": {
            "post": {
                "description": "RPC Stores a dataset. The ID of this stored dataset can be used as input to jobs",
                "consumes": [
                    "application/json",
                    " application/zip"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "RPC Create a storage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Content type to be stored",
                        "name": "X-Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "16": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "2": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "5": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api.storage.v1.StorageService/GetStorage": {
            "post": {
                "description": "RPC Get the metadata of a stored dataset",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "RPC Get a storage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "16": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "2": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "5": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api.storage.v1.StorageService/GetStorageContent": {
            "post": {
                "description": "RPC Gets the content of a stored dataset",
                "produces": [
                    "application/json",
                    " application/zip"
                ],
                "tags": [
                    "Content"
                ],
                "summary": "RPC Get a storage's content",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request results as a Zip or JSON. Default Zip",
                        "name": "Accept",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "16": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "2": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/jobs": {
            "get": {
                "description": "Get a list of jobs based on API Key\n\n\u0026emsp; - API Key is required either as a query parameter or a header",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Get a list of jobs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset of jobs to return",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit of jobs to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Job"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/jobs/buffer": {
            "post": {
                "description": "\u003cb\u003e\u003cu\u003eCreate a buffer job\u003c/u\u003e\u003c/b\u003e\n\u0026emsp; - Buffers every geometry by the given distance\n\n\u0026emsp; - For extra info: https://gdal.org/api/vector_c_api.html#_CPPv412OGR_G_Buffer12OGRGeometryHdi\n\u0026emsp; - API Key is required either as a query parameter or a header\n\u0026emsp; - Pass the geospatial data to be processed in the request body OR\n\u0026emsp; - Pass the ID of an existing dataset with an empty request body\n\u0026emsp; - This task accepts a ZIP containing a shapefile or GeoJSON input\n\u0026emsp; - This task will automatically generate both GeoJSON and ZIP (shapfile) output",
                "consumes": [
                    "application/json",
                    " application/zip"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Create a buffer job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Required if passing geospatial data in request body",
                        "name": "Content-Type",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing dataset to use",
                        "name": "input",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing job whose input dataset to use",
                        "name": "input-of",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing job whose output dataset to use",
                        "name": "output-of",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Buffer distance",
                        "name": "buffer-distance",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Quadrant Segment count",
                        "name": "quadrant-segment-count",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/jobs/filter": {
            "post": {
                "description": "\u003cb\u003e\u003cu\u003eCreate a filter job\u003c/u\u003e\u003c/b\u003e\n\u0026emsp; - Drops features and their geometries that don't match the given filter\n\n\u0026emsp; - API Key is required either as a query parameter or a header\n\u0026emsp; - Pass the geospatial data to be processed in the request body OR\n\u0026emsp; - Pass the ID of an existing dataset with an empty request body\n\u0026emsp; - This task accepts a ZIP containing a shapefile or GeoJSON input\n\u0026emsp; - This task will automatically generate both GeoJSON and ZIP (shapfile) output",
                "consumes": [
                    "application/json",
                    " application/zip"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Create a filter job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Required if passing geospatial data in request body",
                        "name": "Content-Type",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing dataset to use",
                        "name": "input",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing job whose input dataset to use",
                        "name": "input-of",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing job whose output dataset to use",
                        "name": "output-of",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column to filter on",
                        "name": "filter-column",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Value to filter on",
                        "name": "filter-value",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/jobs/rasterlookup": {
            "post": {
                "description": "\u003cb\u003e\u003cu\u003eCreate a raster lookup job\u003c/u\u003e\u003c/b\u003e\n\u0026emsp; - Returns the value of each requested band of which the given point intersects\n\n\u0026emsp; - API Key is required either as a query parameter or a header\n\u0026emsp; - Pass the geospatial data to be processed in the request body OR\n\u0026emsp; - Pass the ID of an existing dataset with an empty request body\n\u0026emsp; - This task accepts a ZIP containing a single TIF file. Valid extensions are: tif, tiff, geotif, geotiff\n\u0026emsp; - This task will generate JSON output",
                "consumes": [
                    "application/json",
                    " application/zip"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Create a raster lookup job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Required if passing geospatial data in request body",
                        "name": "Content-Type",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing dataset to use",
                        "name": "input",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing job whose input dataset to use",
                        "name": "input-of",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing job whose output dataset to use",
                        "name": "output-of",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma separated list of bands",
                        "name": "bands",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Longitude",
                        "name": "longitude",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Latitude",
                        "name": "latitude",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/jobs/removebadgeometry": {
            "post": {
                "description": "\u003cb\u003e\u003cu\u003eCreate a remove bad geometry job\u003c/u\u003e\u003c/b\u003e\n\u0026emsp; - Drops geometries that are invalid\n\n\u0026emsp; - For extra info: https://gdal.org/api/vector_c_api.html#_CPPv413OGR_G_IsValid12OGRGeometryH\n\u0026emsp; - API Key is required either as a query parameter or a header\n\u0026emsp; - Pass the geospatial data to be processed in the request body OR\n\u0026emsp; - Pass the ID of an existing dataset with an empty request body\n\u0026emsp; - This task accepts a ZIP containing a shapefile or GeoJSON input\n\u0026emsp; - This task will automatically generate both GeoJSON and ZIP (shapfile) output",
                "consumes": [
                    "application/json",
                    " application/zip"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Create a remove bad geometry job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Required if passing geospatial data in request body",
                        "name": "Content-Type",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing dataset to use",
                        "name": "input",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing job whose input dataset to use",
                        "name": "input-of",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing job whose output dataset to use",
                        "name": "output-of",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/jobs/reproject": {
            "post": {
                "description": "\u003cb\u003e\u003cu\u003eCreate a reproject job\u003c/u\u003e\u003c/b\u003e\n\u0026emsp; - Reprojects all geometries to the given projection\n\n\u0026emsp; - API Key is required either as a query parameter or a header\n\u0026emsp; - Pass the geospatial data to be processed in the request body OR\n\u0026emsp; - Pass the ID of an existing dataset with an empty request body\n\u0026emsp; - This task accepts a ZIP containing a shapefile or GeoJSON input\n\u0026emsp; - This task will automatically generate both GeoJSON and ZIP (shapfile) output",
                "consumes": [
                    "application/json",
                    " application/zip"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Create a reproject job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Required if passing geospatial data in request body",
                        "name": "Content-Type",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing dataset to use",
                        "name": "input",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing job whose input dataset to use",
                        "name": "input-of",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing job whose output dataset to use",
                        "name": "output-of",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Target projection EPSG",
                        "name": "target-projection",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/jobs/vectorlookup": {
            "post": {
                "description": "\u003cb\u003e\u003cu\u003eCreate a vector lookup job\u003c/u\u003e\u003c/b\u003e\n\u0026emsp; - Returns the feature and geometry of which the given point intersects\n\n\u0026emsp; - API Key is required either as a query parameter or a header\n\u0026emsp; - Pass the geospatial data to be processed in the request body OR\n\u0026emsp; - Pass the ID of an existing dataset with an empty request body\n\u0026emsp; - This task accepts a ZIP containing a shapefile or GeoJSON input\n\u0026emsp; - This task will automatically generate both GeoJSON and ZIP (shapfile) output",
                "consumes": [
                    "application/json",
                    " application/zip"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Create a vector lookup job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Required if passing geospatial data in request body",
                        "name": "Content-Type",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing dataset to use",
                        "name": "input",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing job whose input dataset to use",
                        "name": "input-of",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of existing job whose output dataset to use",
                        "name": "output-of",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma separated list of attributes",
                        "name": "attributes",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Longitude",
                        "name": "longitude",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Latitude",
                        "name": "latitude",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/jobs/{id}": {
            "get": {
                "description": "Get the metadata of a job. This can be used as a way to track job status\n\n\u0026emsp; - API Key is required either as a query parameter or a header",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Get a job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Job"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/jobs/{id}/storages/input": {
            "get": {
                "description": "Get the metadata of a job's input\n\n\u0026emsp; - API Key is required either as a query parameter or a header",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Get a job's input",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rototiller.Storage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/jobs/{id}/storages/input/content": {
            "get": {
                "description": "Gets the content of a job's input\n\n\u0026emsp; - API Key is required either as a query parameter or a header",
                "produces": [
                    "application/json",
                    " application/zip"
                ],
                "tags": [
                    "Content"
                ],
                "summary": "Get a job's input content",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request results as a Zip or JSON. Default Zip",
                        "name": "Accept",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/jobs/{id}/storages/output": {
            "get": {
                "description": "Get the metadata of a job's output\n\n\u0026emsp; - API Key is required either as a query parameter or a header",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Get a job's output",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rototiller.Storage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/jobs/{id}/storages/output/content": {
            "get": {
                "description": "Gets the content of a job's output\n\n\u0026emsp; - API Key is required either as a query parameter or a header",
                "produces": [
                    "application/json",
                    " application/zip"
                ],
                "tags": [
                    "Content"
                ],
                "summary": "Get a job's output content",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request results as a Zip or JSON. Default Zip",
                        "name": "Accept",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/jobs/{id}/task": {
            "get": {
                "description": "Get the metadata of a job's task\n\n\u0026emsp; - API Key is required either as a query parameter or a header",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Get a job's task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rototiller.Task"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/storages": {
            "get": {
                "description": "Get a list of stored datasets based on API Key\n\n\u0026emsp; - API Key is required either as a query parameter or a header",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Get a list of storage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset of storages to return",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit of storages to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rototiller.Storage"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Stores a dataset. The ID of this stored dataset can be used as input to jobs\n\n\u0026emsp; - API Key is required either as a query parameter or a header\n\u0026emsp; - Pass the geospatial data to be stored in the request body",
                "consumes": [
                    "application/json",
                    " application/zip"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create a storage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Storage name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rototiller.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/storages/{id}": {
            "get": {
                "description": "Get the metadata of a stored dataset\n\n\u0026emsp; - API Key is required either as a query parameter or a header",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Get a storage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Storage ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rototiller.Storage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/storages/{id}/content": {
            "get": {
                "description": "Gets the content of a stored dataset\n\n\u0026emsp; - API Key is required either as a query parameter or a header",
                "produces": [
                    "application/json",
                    " application/zip"
                ],
                "tags": [
                    "Content"
                ],
                "summary": "Get a storage's content",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request results as a Zip or JSON. Default Zip",
                        "name": "Accept",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "API Key query parameter",
                        "name": "api-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "API Key header",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Storage ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/tasks": {
            "get": {
                "description": "\u0026emsp; - API Key is required either as a query parameter or a header",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Get a list of task types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rototiller.Task"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/tasks/{type}": {
            "get": {
                "description": "\u0026emsp; - API Key is required either as a query parameter or a header",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Get a task type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task type",
                        "name": "type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rototiller.Task"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Error": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "api.Job": {
            "type": "object",
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "customer_id": {
                    "type": "string"
                },
                "end_time": {
                    "$ref": "#/definitions/timestamppb.Timestamp"
                },
                "error": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "input_id": {
                    "type": "string"
                },
                "output_id": {
                    "type": "string"
                },
                "start_time": {
                    "$ref": "#/definitions/timestamppb.Timestamp"
                },
                "status": {
                    "type": "string"
                },
                "task_type": {
                    "type": "string"
                }
            }
        },
        "rototiller.Storage": {
            "type": "object",
            "properties": {
                "create_time": {
                    "$ref": "#/definitions/timestamppb.Timestamp"
                },
                "customer_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_used": {
                    "$ref": "#/definitions/timestamppb.Timestamp"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "rototiller.Task": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string"
                },
                "params": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "timestamppb.Timestamp": {
            "type": "object",
            "properties": {
                "nanos": {
                    "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
                    "type": "integer"
                },
                "seconds": {
                    "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
