version: '3.4'

services:
  api:
    build: .
    command: a --postgres-host=postgres --postgres-password=pwd --s3-bucket=geocloud --s3-endpoint=http://minio:9000 --s3-disable-ssl --s3-force-path-style
    volumes: [~/.aws/:/root/.aws/:ro]
    networks: [api]
    ports: [8080:8080]
    depends_on: [migrate, minio, postgres]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  migrate:
    build: .
    command: m --postgres-host=postgres --postgres-password=pwd
    networks: [migrate]
    depends_on: [postgres]
  minio:
    image: minio/minio:${MINIO_TAG:-latest}
    entrypoint: sh -c "mkdir -p /var/lib/minio/geocloud && docker-entrypoint.sh server /var/lib/minio"
    networks: [api, worker]
    ports: [9000:9000]
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
  postgres:
    image: postgres:${POSTGRES_TAG:-alpine}
    networks: [api, migrate, worker]
    ports: [5432:5432]
    environment:
      POSTGRES_DB: geocloud
      POSTGRES_USER: geocloud
      POSTGRES_PASSWORD: pwd
  worker:
    build: .
    privileged: true
    command: w --postgres-host=postgres --postgres-password=pwd --s3-bucket=geocloud --s3-endpoint=http://minio:9000 --s3-disable-ssl --s3-force-path-style -t buffer -t filter -t removebadgeometry -t reproject
    volumes: [~/.aws/:/root/.aws/:ro, workdir:/var/lib/geocloud/]
    networks: [worker]
    depends_on: [postgres, migrate, minio]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      GEOCLOUD_REGISTRY_USERNAME: ${GEOCLOUD_REGISTRY_USERNAME}
      GEOCLOUD_REGISTRY_PASSWORD: ${GEOCLOUD_REGISTRY_PASSWORD}

networks:
  api:
  migrate:
  worker:

volumes:
  workdir:
  # postgresql:
