version: '3.4'

networks:
  api:
  migrate:
  worker:
  secretary:

services:
  api:
    build: .
    image: &image ghcr.io/logsquaredn/geocloud:${GEOCLOUD_TAG:-latest}
    command: a
    volumes: [~/.aws/:/root/.aws/:ro]
    networks: [api]
    ports: [8080:8080]
    depends_on: &depends_on [datastore, messagequeue, migrate, objectstore]
    environment: &environment
      GEOCLOUD_POSTGRES_ADDRESS: datastore
      GEOCLOUD_POSTGRES_PASSWORD: geocloud
      GEOCLOUD_S3_BUCKET: geocloud
      GEOCLOUD_S3_ENDPOINT: http://objectstore:9000
      GEOCLOUD_S3_DISABLE_SSL: t
      GEOCLOUD_S3_FORCE_PATH_STYLE: t
      GEOCLOUD_AMQP_ADDRESS: messagequeue
      GEOCLOUD_AMQP_PASSWORD: geocloud
      GEOCLOUD_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-geocloud}
      GEOCLOUD_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-geocloud}
      GEOCLOUD_STRIPE_API_KEY: ${GEOCLOUD_STRIPE_API_KEY}
  migrate:
    build: .
    image: *image
    command: m
    networks: [migrate]
    depends_on: [datastore]
    environment: *environment
  secretary:
    build: .
    image: *image
    command: s --work-jobs-before 1s --work-storage-before 1s
    volumes: [~/.aws/:/root/.aws/:ro]
    networks: [secretary]
    depends_on: [datastore, objectstore]
    environment:
      <<: *environment
      GEOCLOUD_S3_ARCHIVE_BUCKET: geocloud-archive
      GEOCLOUD_S3_ARCHIVE_ENDPOINT: http://objectstore:9000
      GEOCLOUD_S3_ARCHIVE_DISABLE_SSL: t
      GEOCLOUD_S3_ARCHIVE_FORCE_PATH_STYLE: t
  objectstore:
    image: minio/minio:${MINIO_TAG:-latest}
    command: server /var/lib/minio --console-address ":9001"
    volumes: [./hack/minio:/var/lib/minio]
    networks: [api, worker, secretary]
    ports: [9000:9000, 9001:9001]
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID:-geocloud}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY:-geocloud}
  datastore:
    image: postgres:${POSTGRES_TAG:-alpine}
    networks: [api, migrate, worker, secretary]
    ports: [5432:5432]
    volumes: [./hack/postgresql:/var/lib/postgresql]
    environment:
      POSTGRES_DB: geocloud
      POSTGRES_USER: geocloud
      POSTGRES_PASSWORD: geocloud
  messagequeue:
    image: rabbitmq:${RABBITMQ_TAG:-alpine}
    networks: [api, worker]
    ports: [5672:5672, 15672:15672]
    volumes: [./hack/rabbitmq/lib:/var/lib/rabbitmq, ./hack/rabbitmq/etc:/etc/rabbitmq:ro]
  worker:
    build: .
    image: *image
    command: w
    volumes: [~/.aws:/root/.aws:ro, ./hack/geocloud:/var/lib/geocloud]
    networks: [worker]
    depends_on: *depends_on
    environment: *environment
  removebadgeometry:
    build: .
    image: *image
    entrypoint: removebadgeometry
    command: /tmp/input/input.json /tmp
    volumes: [./testdata/geojson/featurecollection.json:/tmp/input/input.json:ro]
  buffer:
    build: .
    image: *image
    volumes: [./testdata/geojson/featurecollection.json:/tmp/input/input.json:ro]
    entrypoint: buffer
    command: /tmp/input/input.json /tmp 2
  filter:
    build: .
    image: *image
    volumes: [./testdata/geojson/featurecollection.json:/tmp/input/input.json:ro]
    entrypoint: filter
    command: /tmp/input/input.json /tmp prop0 value0
  reproject:
    build: .
    image: *image
    volumes: [./testdata/geojson/featurecollection.json:/tmp/input/input.json:ro]
    entrypoint: reproject
    command: /tmp/input/input.json /tmp 2000
  vectorlookup:
    build: .
    image: *image
    volumes: [./testdata/geojson/featurecollection.json:/tmp/input/input.json:ro]
    entrypoint: vectorlookup
    command: /tmp/input/input.json /tmp 97.5679 34.6970
  rasterlookup:
    build: .
    image: *image
    volumes: [./testdata/raster/input.tif:/tmp/input/input.tif:ro]
    entrypoint: rasterlookup
    command: /tmp/input/input.tif /tmp 2,4 -89.9383 29.95313
