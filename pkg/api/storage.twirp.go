// Code generated by protoc-gen-twirp v8.1.3, DO NOT EDIT.
// source: pkg/api/storage.proto

package api

import context "context"
import fmt "fmt"
import http "net/http"
import io "io"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ========================
// StorageService Interface
// ========================

type StorageService interface {
	GetStorages(context.Context, *GetStoragesRequest) (*GetStoragesResponse, error)

	GetStorage(context.Context, *GetStorageRequest) (*GetStorageResponse, error)
}

// ==============================
// StorageService Protobuf Client
// ==============================

type storageServiceProtobufClient struct {
	client      HTTPClient
	urls        [2]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewStorageServiceProtobufClient creates a Protobuf client that implements the StorageService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewStorageServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) StorageService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "rototiller.api", "StorageService")
	urls := [2]string{
		serviceURL + "GetStorages",
		serviceURL + "GetStorage",
	}

	return &storageServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *storageServiceProtobufClient) GetStorages(ctx context.Context, in *GetStoragesRequest) (*GetStoragesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rototiller.api")
	ctx = ctxsetters.WithServiceName(ctx, "StorageService")
	ctx = ctxsetters.WithMethodName(ctx, "GetStorages")
	caller := c.callGetStorages
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetStoragesRequest) (*GetStoragesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStoragesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStoragesRequest) when calling interceptor")
					}
					return c.callGetStorages(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStoragesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStoragesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *storageServiceProtobufClient) callGetStorages(ctx context.Context, in *GetStoragesRequest) (*GetStoragesResponse, error) {
	out := new(GetStoragesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *storageServiceProtobufClient) GetStorage(ctx context.Context, in *GetStorageRequest) (*GetStorageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rototiller.api")
	ctx = ctxsetters.WithServiceName(ctx, "StorageService")
	ctx = ctxsetters.WithMethodName(ctx, "GetStorage")
	caller := c.callGetStorage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetStorageRequest) (*GetStorageResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStorageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStorageRequest) when calling interceptor")
					}
					return c.callGetStorage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStorageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStorageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *storageServiceProtobufClient) callGetStorage(ctx context.Context, in *GetStorageRequest) (*GetStorageResponse, error) {
	out := new(GetStorageResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==========================
// StorageService JSON Client
// ==========================

type storageServiceJSONClient struct {
	client      HTTPClient
	urls        [2]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewStorageServiceJSONClient creates a JSON client that implements the StorageService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewStorageServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) StorageService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "rototiller.api", "StorageService")
	urls := [2]string{
		serviceURL + "GetStorages",
		serviceURL + "GetStorage",
	}

	return &storageServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *storageServiceJSONClient) GetStorages(ctx context.Context, in *GetStoragesRequest) (*GetStoragesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rototiller.api")
	ctx = ctxsetters.WithServiceName(ctx, "StorageService")
	ctx = ctxsetters.WithMethodName(ctx, "GetStorages")
	caller := c.callGetStorages
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetStoragesRequest) (*GetStoragesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStoragesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStoragesRequest) when calling interceptor")
					}
					return c.callGetStorages(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStoragesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStoragesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *storageServiceJSONClient) callGetStorages(ctx context.Context, in *GetStoragesRequest) (*GetStoragesResponse, error) {
	out := new(GetStoragesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *storageServiceJSONClient) GetStorage(ctx context.Context, in *GetStorageRequest) (*GetStorageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rototiller.api")
	ctx = ctxsetters.WithServiceName(ctx, "StorageService")
	ctx = ctxsetters.WithMethodName(ctx, "GetStorage")
	caller := c.callGetStorage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetStorageRequest) (*GetStorageResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStorageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStorageRequest) when calling interceptor")
					}
					return c.callGetStorage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStorageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStorageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *storageServiceJSONClient) callGetStorage(ctx context.Context, in *GetStorageRequest) (*GetStorageResponse, error) {
	out := new(GetStorageResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =============================
// StorageService Server Handler
// =============================

type storageServiceServer struct {
	StorageService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewStorageServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewStorageServiceServer(svc StorageService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &storageServiceServer{
		StorageService:   svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *storageServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *storageServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// StorageServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const StorageServicePathPrefix = "/twirp/rototiller.api.StorageService/"

func (s *storageServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "rototiller.api")
	ctx = ctxsetters.WithServiceName(ctx, "StorageService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "rototiller.api.StorageService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "GetStorages":
		s.serveGetStorages(ctx, resp, req)
		return
	case "GetStorage":
		s.serveGetStorage(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *storageServiceServer) serveGetStorages(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetStoragesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetStoragesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *storageServiceServer) serveGetStoragesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStorages")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetStoragesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.StorageService.GetStorages
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetStoragesRequest) (*GetStoragesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStoragesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStoragesRequest) when calling interceptor")
					}
					return s.StorageService.GetStorages(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStoragesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStoragesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetStoragesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStoragesResponse and nil error while calling GetStorages. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *storageServiceServer) serveGetStoragesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStorages")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetStoragesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.StorageService.GetStorages
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetStoragesRequest) (*GetStoragesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStoragesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStoragesRequest) when calling interceptor")
					}
					return s.StorageService.GetStorages(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStoragesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStoragesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetStoragesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStoragesResponse and nil error while calling GetStorages. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *storageServiceServer) serveGetStorage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetStorageJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetStorageProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *storageServiceServer) serveGetStorageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStorage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetStorageRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.StorageService.GetStorage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetStorageRequest) (*GetStorageResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStorageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStorageRequest) when calling interceptor")
					}
					return s.StorageService.GetStorage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStorageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStorageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetStorageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStorageResponse and nil error while calling GetStorage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *storageServiceServer) serveGetStorageProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStorage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetStorageRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.StorageService.GetStorage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetStorageRequest) (*GetStorageResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStorageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStorageRequest) when calling interceptor")
					}
					return s.StorageService.GetStorage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStorageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStorageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetStorageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStorageResponse and nil error while calling GetStorage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *storageServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *storageServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *storageServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "rototiller.api", "StorageService")
}

var twirpFileDescriptor1 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x6f, 0xda, 0x40,
	0x10, 0xad, 0x01, 0x81, 0x19, 0x4b, 0x48, 0xdd, 0x7e, 0xb9, 0x5c, 0x4a, 0x97, 0x0b, 0x55, 0xa5,
	0xb5, 0x0a, 0x87, 0x1e, 0x7a, 0xeb, 0x05, 0x25, 0x47, 0x13, 0xa4, 0x28, 0x17, 0xb4, 0xe0, 0x89,
	0xb3, 0x8a, 0xed, 0x35, 0xde, 0x75, 0xf2, 0xfb, 0xf2, 0x27, 0xf2, 0x7b, 0x22, 0xaf, 0xd7, 0x7c,
	0x45, 0x21, 0x17, 0xcb, 0xf3, 0xe6, 0xbd, 0x37, 0x6f, 0xc6, 0x86, 0x2f, 0xf9, 0x7d, 0x1c, 0xf0,
	0x5c, 0x04, 0x4a, 0xcb, 0x82, 0xc7, 0xc8, 0xf2, 0x42, 0x6a, 0x49, 0x06, 0xd5, 0x53, 0x8b, 0x24,
	0xc1, 0x82, 0xf1, 0x5c, 0x0c, 0x7f, 0xc4, 0x52, 0xc6, 0x09, 0x06, 0xa6, 0xbb, 0x2e, 0x6f, 0x03,
	0x2d, 0x52, 0x54, 0x9a, 0xa7, 0x79, 0x2d, 0xa0, 0xcf, 0x0e, 0xf4, 0x16, 0xb5, 0x05, 0x19, 0x40,
	0x4b, 0x44, 0xbe, 0x33, 0x72, 0x26, 0xfd, 0xb0, 0x25, 0x22, 0xf2, 0x1d, 0x5c, 0xf9, 0x98, 0x61,
	0xb1, 0x12, 0x91, 0xdf, 0x32, 0x68, 0xcf, 0xd4, 0x17, 0x11, 0x21, 0xd0, 0xc9, 0x78, 0x8a, 0x7e,
	0xdb, 0xc0, 0xe6, 0x9d, 0x7c, 0x85, 0xae, 0xd2, 0x5c, 0x97, 0xca, 0xef, 0x18, 0xd4, 0x56, 0xe4,
	0x2f, 0xf4, 0x13, 0xae, 0xf4, 0xaa, 0x54, 0x18, 0xf9, 0xee, 0xc8, 0x99, 0x78, 0xd3, 0x21, 0xab,
	0x73, 0xb1, 0x26, 0x17, 0xbb, 0x6a, 0x72, 0x85, 0x6e, 0x45, 0x5e, 0x2a, 0x8c, 0xc8, 0x3f, 0xf0,
	0x36, 0x05, 0x72, 0x8d, 0xab, 0x2a, 0xb5, 0xdf, 0x7f, 0x57, 0x0a, 0x35, 0xbd, 0x02, 0xe8, 0x67,
	0x20, 0x73, 0xd4, 0x76, 0x35, 0x15, 0xe2, 0xb6, 0x44, 0xa5, 0xe9, 0x25, 0x7c, 0x3a, 0x42, 0x55,
	0x2e, 0x33, 0x85, 0x64, 0x06, 0xae, 0xbd, 0xa3, 0xf2, 0x9d, 0x51, 0x7b, 0xe2, 0x4d, 0xbf, 0xb1,
	0xe3, 0x4b, 0x32, 0xab, 0x09, 0x77, 0x44, 0x3a, 0x86, 0x8f, 0x7b, 0x2f, 0x3b, 0xe0, 0xf4, 0x86,
	0x74, 0x7e, 0x18, 0x63, 0x37, 0xef, 0x0f, 0xf4, 0xac, 0x8d, 0xa1, 0x9e, 0x19, 0xd7, 0xf0, 0xa6,
	0x4f, 0x0e, 0x0c, 0x2c, 0xb8, 0xc0, 0xe2, 0x41, 0x6c, 0x90, 0x5c, 0x83, 0x77, 0xb0, 0x0c, 0xa1,
	0xa7, 0x1e, 0xaf, 0xf7, 0x1f, 0x8e, 0xcf, 0x72, 0xea, 0x74, 0xf4, 0x03, 0x59, 0x02, 0xec, 0x1b,
	0xe4, 0xe7, 0xdb, 0xa2, 0xc6, 0x97, 0x9e, 0xa3, 0x34, 0xb6, 0xff, 0x7f, 0xdf, 0xfc, 0x8a, 0x85,
	0xbe, 0x2b, 0xd7, 0x6c, 0x23, 0xd3, 0x20, 0x91, 0xb1, 0xda, 0x96, 0xbc, 0xc0, 0x28, 0x0b, 0xf6,
	0xea, 0xc0, 0xfe, 0xd8, 0xeb, 0xae, 0xf9, 0xc0, 0xb3, 0x97, 0x00, 0x00, 0x00, 0xff, 0xff, 0x51,
	0x8a, 0x2c, 0x0a, 0xea, 0x02, 0x00, 0x00,
}
